package com.mcp.server.domain.client.service.public_api.user.core;

import com.mcp.server.domain.client.OpenAiClient;
import com.mcp.server.domain.client.dto.public_api.user.CreateUserDto;
import com.mcp.server.domain.client.dto.public_api.user.UpdateUserDto;
import com.mcp.server.domain.user.entity.user.User;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;

import java.util.Map;
import java.util.UUID;

/**
 * Service for processing NLP-based CRUD operations for users via OpenAI.
 * <p>
 * This service interprets JSON-based commands generated by OpenAI and maps them
 * to CRUD operations using {@link ClientService}.
 * </p>
 *
 * <p>
 * Supported operations:
 * <ul>
 *     <li>{@code create} - Create a new user</li>
 *     <li>{@code get} - Get a user by ID or all users if no ID provided</li>
 *     <li>{@code update} - Update a user by ID</li>
 *     <li>{@code delete} - Delete a user by ID</li>
 * </ul>
 * </p>
 *
 * <p>
 * Example input map:
 * <pre>
 * {@code
 * Map<String, Object> body = Map.of("prompt", "Some user CRUD request");
 * ResponseEntity<?> response = nlpCrudService.process(body);
 * }
 * </pre>
 * </p>
 *
 * @see OpenAiClient
 * @see ClientService
 */
@Service
@RequiredArgsConstructor
public class NlpCrudService {

    private final ClientService userService;
    private final OpenAiClient openAiClient;

    /**
     * Processes an NLP-based CRUD request.
     *
     * @param body a map containing the "prompt" key for OpenAI
     * @return a {@link ResponseEntity} containing the result of the operation
     * @throws ResponseStatusException if the prompt is missing, invalid, or the operation is unknown
     */
    public ResponseEntity<?> process(Map<String, Object> body) {
        String prompt = str(body.get("prompt"));
        if (isBlank(prompt)) throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Prompt is required");

        @SuppressWarnings("unchecked")
        Map<String, Object> cmd = openAiClient.chatJson(prompt, Map.class);

        String op = str(cmd.get("operation"));
        Map<String,Object> data = (Map<String,Object>) cmd.get("data");

        return switch (op) {
            case "create" -> {
                CreateUserDto dto = new CreateUserDto(str(data.get("name")), str(data.get("mail")), i(data.get("age")));
                yield ResponseEntity.status(HttpStatus.CREATED).body(userService.create(dto));
            }
            case "get" -> {
                String idStr = str(data.get("id"));
                if (notBlank(idStr)) yield ResponseEntity.ok(userService.getById(parse(idStr)));
                else yield ResponseEntity.ok(userService.getAll());
            }
            case "update" -> {
                UpdateUserDto dto = new UpdateUserDto(str(data.get("name")), str(data.get("mail")), i(data.get("age")));
                yield ResponseEntity.ok(userService.update(parse(str(data.get("id"))), dto));
            }
            case "delete" -> {
                userService.deleteById(parse(str(data.get("id"))));
                yield ResponseEntity.noContent().build();
            }
            default -> throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Unknown op: " + op);
        };
    }

    private static String str(Object o) { return o == null ? null : String.valueOf(o); }
    private static boolean isBlank(String s) { return s == null || s.isBlank(); }
    private static boolean notBlank(String s) { return !isBlank(s); }
    private static Integer i(Object o) { try { return o == null ? null : Integer.parseInt(String.valueOf(o)); } catch (Exception e) { return null; } }
    private static UUID parse(String raw) { try { return UUID.fromString(raw); } catch (Exception e) { throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Invalid UUID: " + raw); } }
}
